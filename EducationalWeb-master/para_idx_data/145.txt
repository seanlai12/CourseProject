Another technical component in a retrieval system is integer compression, which is applied to compress the very large postings file. A compressed index is not only smaller, but also faster when it's loaded into main memory. The general idea of compressing integers (and compression in general) is to exploit the non-uniform distribution of values. Intuitively, we will assign a short code to values that are frequent at the price of using longer codes for rare values. The optimal compression rate is related to the entropy of the random variable taking the values that we consider-skewed distributions would have lower entropy and are thus easier to compress. It is important that all of our compression methods need to support random access decoding; that is, we could like to seek to a particular position in the postings file and start decompressing without having to decompress all the previous data. Because inverted index entries are stored sequentially, we may exploit this fact to compress document IDs (and position information) based on their gaps. The document IDs would otherwise be distributed relatively uniformly, but the distribution of their gaps would be skewed since when a term is frequent, its inverted list would have many document IDs leading to many small gaps. Consider the following example of a list of document IDs: {23, 25, 34, 35, 39, 43, 49, 51, 57, 59, . . .}. Instead of storing these exact numbers, we can store the offsets between them; this creates more smaller numbers, which are easier to compress since they take 8.5 Compression 159 up less space and are more frequent: 2, 9, 1, 4, 4, 6, 2, 6, 2, . . .}. To get the actual document ID values, simply add the offset to the previous value. So the first ID is 23 and the second is 23 + 2 = 25. The third is 25 + 9 = 34, and so on. In this section, we will discuss the following types of compression, which may or may not operate on gap-encoded values: . unary encoding (bitwise); . γ -encoding (bitwise); . δ-encoding (bitwise); . vByte (block); and . frame of reference (block). 