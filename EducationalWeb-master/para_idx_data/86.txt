Programming Query q Presidential d 3 ? In Figure 6.2, we show a three-dimensional space with three words: programming, library, and presidential. Each term defines one dimension. We can consider vectors in this three dimensional space, and we will assume all our documents and the query will all be placed in this vector space. For example, the vector d 1 represents a document that probably covers the terms library and presidential without really talking about programming. What does this mean in terms of representation of the document? It means that we will rely solely on this vector to represent the original document, and thus ignore everything else, including, e.g., the order of the words (which may sometimes be important to keep!). It is thus not an optimal representation, but it is often sufficient for many retrieval problems. Intuitively, in this representation, d 1 seems to suggest a topic in either presidential or library. Now this is different from another document which might be represented as a different vector d 2 . In this case, the document covers programming and library, but it doesn't talk about presidential. As you can probably guess, the topic is likely about programming language and the library is actually a software library. By using this vector space representation, we can intuitively capture the differences between topics of documents. Next, d 3 is pointing in a direction that might be about presidential and programming. We place all documents in our collection in this vector space and they will be pointing to all kinds of directions given by these three dimensions. Similarly, we can place our query in this space as another vector. We can then measure the similarity between the query vector and every document vector. In this case, for example, we can easily see d 2 seems to be the closest to the query vector 92 Chapter 6 Retrieval Models and therefore d 2 will be ranked above the others. This is the main idea of the vector space model. To be more precise, the VS model is a framework. In this framework, we make some assumptions. One assumption is that we represent each document and query by a term vector. Here, a term can be any basic concept such as a word or a phrase, or even n-grams of characters or any other feature representation. Each term is assumed to define one dimension. Therefore, since we have |V | terms in our vocabulary, we define a |V |-dimensional space. A query vector would consist of a number of elements corresponding to the weights of different terms. Each document vector is also similar; it has a number of elements and each value of each element is indicating the weight of the corresponding term. The relevance in this case is measured based on the similarity between the two vectors. Therefore, our retrieval function is also defined as the similarity between the query vector and document vector. Now, if you were asked to write a program to implement this approach for a search engine, you would realize that this explanation was far from complete. We haven't seen many things in detail, therefore it's impossible to actually write the program to implement this. That's why this is called the vector space retrieval framework. It has to be refined in order to actually suggest a particular function that can be implemented on a computer. First, it did not say how to define or select the basic concepts (terms). We clearly assume the concepts are orthogonal, otherwise there will be redundancy. For example, if two synonyms are somehow distinguished as two different concepts, they would be defined in two different dimensions, causing a redundancy or overemphasis of matching this concept (since it would be as if you matched two dimensions when you actually matched only one semantic concept). Second, it did not say how to place documents and queries in this vector space. We saw some examples of query and document vectors, but where exactly should the vector for a particular document point to? This is equivalent to how to define the term weights. This is a very important question because the term weight in the query vector indicates the importance of a term; depending on how you assign the weight, you might prefer some terms to be matched over others. Similarly, term weight in the document is also very meaningful-it indicates how well the term characterizes the document. If many nonrelevant documents are returned by a search engine using this model, then the chosen terms and weights must not represent the documents accurately. Finally, how to define the similarity measure is also unclear. These questions must be addressed before we can have an operational function that we can actually implement using a programming language. Solving these problems is the main topic of the next section. 