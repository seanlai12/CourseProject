In this method, the "blocks" that we are encoding are bytes. Frame of reference encoding takes a block size k and encodes k integers at a time, so a block in this method is actually a sequence of numbers. Take the following block of size k = 8 as an example: {45, 47, 51, 59, 63, 64, 70, 72}. We transform this block by subtracting the minimum value in the list from each element: 2, 6, 14, 18, 19, 25, 27}, min = 45. Up to this point, this is similar to the gap encoding discussed previously. However, instead of encoding each value with a bitwise compression such as γ -or δ-encoding, we will simply use binary with the smallest number of bits possible. Since the maximum number in this chunk is 27, we will store each of the integers in 5 bits: where 45 and 5 could be stored however is convenient (e.g., fixed binary length). This method also reduces the number of bitwise operations, since we read chunks of 5 bits and add them to the base value 45 to recreate the sequence. Another nice side effect is that we know the minimum value and maximum possible value stored in this chunk; therefore, if we are looking for a particular integer (say for a document ID), we know we can skip this chunk and not decompress it if I D < 45 or I D > 45 + 2 5 . 