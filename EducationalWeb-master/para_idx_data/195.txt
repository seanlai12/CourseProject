This is a sum of a common range of judged items and measures whether the two users tended to all give higher ratings to similar items, or lower ratings to similar items. Another measure is the cosine measure, which treats the rating vectors as vectors in the vector space, and measures the cosine of the angle between the two vectors: As we've discussed previously in this book, this measure has been used in the vector space model for retrieval. We'll also see how it is used in clustering in Chapter 14. In all these cases, note that the user similarity is based on their preferences on items, and we did not actually use any content information of these items. It didn't matter what these items are; they can be movies, books, products, or text documents. This allows such an approach to be applied to a wide range of problems. There are some ways to improve this approach, most of which consider the user similarity measure. There are some practical issues to deal with here as well; for example, there will be many missing values. We could set them to default values or the average ratings of other users. That will be a simple solution, but there are advantages to approaches that can actually try to predict those missing values and then use the predicted values to improve the similarity measure. In fact, in memorybased collaborative filtering, we can predict judgements with missing values. As you can imagine, we could apply an iterative approach where we first do some preliminary prediction and then use the predicted values to further improve the similarity function. Another idea which is quite similar to the idea of IDF that we have seen in text research, is called the inverse user frequency or IUF. Here, the idea is to look at where the two users share similar ratings. If the item is a popular item that has been viewed by many people, it's not as informative. Conversely, if it's a rare item that has not been viewed by many users, then it says more about their similarity, emphasizing more on similarity of items that are not viewed by many users. Let's summarize our discussion of recommender systems. In some sense, the filtering task of recommendation is easy and in another sense the task is rather difficult. It's easy because the user expectation is low. That is, any recommendation is better than none. The system takes initiative to push the information to the user, so the user doesn't really make an effort. Unless you recommend only noisy items or useless documents, any information would be appreciated. Thus in that sense, it's easy. 