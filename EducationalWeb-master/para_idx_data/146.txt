With bitwise compression, instead of writing out strings representing numbers (like "1624"), or fixed byte-width chunks (like a 4-byte integer as "00000658"), we are writing raw binary numbers. When the representation ends, the next number begins. There is no fixed width, or length, of the number representations. Using bitwise compression means performing some bit operations for every bit that is encoded in order to "build" the compressed integer back into its original form. Unary. Unary encoding is the simplest method. To write the integer k, we simply write k − 1 zeros followed by a one. The one acts as a delimiter and lets us know when to stop reading: Note that we can't encode the number zero-this is true of most other methods as well. An example of a unary-encoded sequence is 000100100010000000101000100001 = 4, 3, 4, 8, 2, 4, 5. 160 Chapter 8 Search Engine Implementation As long as the lexicon has a pointer to the beginning of a compressed integer, we can easily support random access decoding. We also have the property that small numbers take less space, while larger numbers take up more space. The next two compression methods are built on the concept of unary encoding. Gamma. To encode a number with γ -encoding, first simply write the number in binary. Let k be the number of bits in your binary string. Then, prepend k − 1 zeros to the binary number: To decode, read and count k zeros until you hit a one. Read the one and additional k bits in binary. Note that all γ codes will have an odd number of bits. Delta. In short, δ-encoding is γ -encoding a number and then γ -encoding the unary prefix (including the one): To decode, decode the γ code at your start position to get an integer k. Write a one, and then read the next k + 1 bits in binary (including the one you wrote). As you can see, the δ compression at first starts off to have more bits than the γ encoding, but eventually becomes more efficient as the numbers get larger. It probably depends on the particular dataset (the distribution of integers) as to which compression method would be better in terms of compression ratio. A compression ratio is simply the uncompressed size divided by the compressed size. Thus, a compression ratio of 3 is better (in that the compressed files are smaller) than a compression ratio of 2. 