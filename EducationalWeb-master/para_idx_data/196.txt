Filtering can also be considered a much harder task because you have to make a binary decision and can't afford waiting for many items to enhance your belief that one is better than others. Let's think about news filtering as soon as the system detects the news articles: you have to decide whether the news would be interesting to a user. If you wait for a few days, even an accurate recommendation of the most relevant news is not interesting. Another reason why it's hard is due to data sparseness. If you think of this as a learning problem in collaborative filtering, for example, it's purely based on learning from the past ratings. If you don't have many ratings, there's really not much you can do. As we mentioned, there are strategies that have been proposed to solve the problem. For example, we can use more user information to assess their similarity instead of just using the item preferences. We also talked about the two strategies for a filtering task; one is content-based where we look at item content similarity. The other is user similarity, which is collaborative filtering. We talked about push vs. pull as two strategies for getting access to the text data. Recommender systems aid users in push mode whereas search engines assist users in pull mode. 