In this section, we discuss some interesting possibilities of extending META to a general and unified text data management and analysis system. In one direction, we can envision implementing the architecture shown in Figure 20.8 where we extend a search engine to support various topic models, which can further enable improved text categorization, text summarization, and text clustering. Indexes (forward and inverted) are a common storage mechanism for most text mining applications in META. Analyzers and tokenizers are the first operators applied on text, where various features are created and term IDs are assigned. If the terms are not stored in an index, they are usually stored in a meta::sequence, which maintains term order for further analysis. Additionally, most text mining applications take an index as input. This common structure for all tasks enables higher-level "wrapper" functions to be implemented that act in the same way as previously described in this chapter. For example: . TEXTOBJECT is represented in META as a meta::corpus::document . TEXTOBJECTSET is meta::index::forward_index or meta::index:: inverted_index . One example of a TEXTOBJECTSEQUENCE is meta::sequence::sequence. . One example of a WEIGHTEDTEXTOBJECTSEQUENCE is the output from the score function in meta::index::ranker. If we make higher-level functions that pass these objects to different analysis components, we enable this unified view of text analysis. Using meta::corpus:: metadata allows basic structured data to be stored for each document. More advanced structured operations like those found in databases are not currently implemented, but simple filtering and grouping commands are easily supported, such as the filtering functions in meta::index::ranker and meta::classify:: classifier::knn. 