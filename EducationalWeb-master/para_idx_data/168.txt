D 10 DCG@10 = 3 + 2/log 2 + 1/log 3 + … + 1/log 10 IdealDCG@10 = 3 + 3/log 2 + 3/log 3 + … + 3/log 9 + 2/log 10 DCG@10 -IdealDCG@10 Normalized DCG = Assume: there are 9 documents rated "3" in total in the collection Relevance level: r = 1 (non-relevant), 2 (marginally relevant), 3 (very relevant) Earlier we made the point that relevance is a matter of degree. We often are able to distinguish very highly relevant documents from documents that are still useful, but with a lower relevance. In Figure 9.7, we show an example of three relevance levels: level three for highly relevant, two for marginally relevant, and one for non-relevant. How do we evaluate a new system using these judgements? We can't use average precision since it only operates on binary relevance values; if we treat level two and three as only one level, then we lose the information gained from comparing these two categories. MAP, gMAP, and MRR depend on average precision, so we can't use them either. Let's look at the top relevant results when using these judgments. We imagine the user would mostly care about the top ten results. We call these multi-level judgements "gains," since they roughly correspond to how much information a user gains when viewing a document. Looking at the first document, the user can gain three points; looking at the non-relevant documents, the user would only gain one point. This gain usually matches the utility of a document from a user's perspective. If we assume the user stops at ten documents we can cumulatively sum the information gain from traversing the list of returned documents. Let r i be the gain of result i, and let i range from one to n, where we set n to ten in our example. We then have the cumulative gain (CG) as If the user looks at more documents, the cumulative gain is more. This is at the cost of spending more time to examine the list. Thus, cumulative gain gives us some idea about how much total gain the user would have if the user examines all these documents. There is one deficiency which is not considering the rank or position of each document. Looking at the CG sum of the top four documents, we know there is only one highly relevant document, one marginally relevant document, two nonrelevant documents; we don't know where they are ranked in the list. Ideally, we want those with gains of three to be ranked on the top. But how can we capture that intuition? The second three is not as good as the first three at the top. That means the contribution of gain from different documents has to be weighted by their position. The document at position one doesn't need to be discounted because you can assume that the user always sees this document, but the second one will be discounted a little bit because there's a small possibility that the user wouldn't notice it. We divide this gain by a weight based on the position in order to capture this position-based penalty. The discounted cumulative gain does exactly this: Each document's gain is discounted by dividing by a logarithm of its position in the list. Thus, a lowly ranked document would not contribute as much gain as a highly ranked document. That means if, for example, you switch the position of D 5 and D 2 , then the overall DCG score would increase since D 5 's relevance score of three is discounted less by being close to the top. At this point, we have a discounted cumulative gain for measuring the utility of a ranked list with multiple levels of judgment. We still need to do a little bit more in order to make this measure comparable across different queries. The idea here is normalized discounted cumulative gain (NDCG): It is simply DCG normalized by the ideal DCG (IDCG) for a particular query. The IDCG is the DCG of an ideal ranked list with the most relevant documents at the top, sorted in decreasing order of relevance. For example, imagine that we have nine documents in the whole collection rated three. Then, our ideal ranked list would have put all these nine documents on the very top. All this would be followed by a two, because that's the best we could do after we have run out of threes. Then, we can compute the DCG for this ideal ranked list. This becomes the denominator 