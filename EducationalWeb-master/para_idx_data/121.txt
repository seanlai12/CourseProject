We have the parameter α controlling the original query term weight, which all happened to be one. We have β to control the influence of the relevant centroid vector C r . Finally, we have γ , which is the non-relevant centroid C n weight. Shifting the original query vector q by these amounts yields our modified query q m . We rerun the search with this new query. Due to the movement of the query vector, we should match the relevant documents much better, since we moved q closer to them and away from the non-relevant documents-this is precisely what we want from feedback. If we apply this method in practice we will see one potential problem: we would be performing a somewhat large computation to calculate the centroids and modify all the weights in the new query. Therefore, we often truncate this vector and only retain the terms which contain the highest weights, considering only a small number of words. This is for efficiency. Additionally, negative examples or nonrelevant examples tend not to be very useful, especially compared with positive examples. One reason is because negative documents distract the query in all directions, so taking the average doesn't really tell us where exactly it should be moving to. On the other hand, positive documents tend to be clustered together and they are often in a consistent direction with respect to the query. Because of this effect, we sometimes don't use the negative examples or set the parameter γ to be small. It's also important to avoid over-fitting, which means we have to keep relatively high weight α on the original query terms. We don't want to overly trust a small sample of documents and completely reformulate the query without regard to its original meaning. Those original terms are typed in by the user because the user decided that those terms were important! Thus, we bias the modified vector towards the original query direction. This is especially true for pseudo relevance feedback, since the feedback documents are less trustworthy. Despite these issues, the Rocchio method is usually robust and effective, making it a very popular method for feedback. 