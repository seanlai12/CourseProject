// maps a document to a list of matching terms for w ∈ q do for d , count ∈ Idx.fetch docs(w) do context [d].append(count) end for end for priority queue = {} // low score is treated as high priority for d , term counts ∈ context do score = 0 for count ∈ term counts do score = score + score term(count) end for priority queue.push (d , score) if priority queue.size() > k then priority queue.pop() // removes lowest score so far end if end for Return sorted documents from priority queue Filters can be as complex as desired, since a filter is essentially just a Boolean function that takes a document and returns whether or not it should be returned in the list of scored documents. The filtering function can then be an optional parameter to the scoring function which has access to the document metadata store (usually a database) and a forward index (in order to filter documents that contain certain terms). 