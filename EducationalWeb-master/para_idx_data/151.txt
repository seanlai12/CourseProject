We first consider the least recently used (LRU) cache as displayed in Figure 8  If it doesn't exist in the cache, retrieve it from disk and insert it into the cache. If this causes the cache to exceed its maximum size, remove the least-recently used postings list. We want searching the cache to be fast, so we use a hash table to store term IDs as keys and postings lists as values. This enables O(1) amortized insert, find, and delete operations. The interesting part of the LRU cache is how to determine the access order of the objects. To do this, we link together the values as a doubly linked list. Once an element is inserted or accessed, it is moved to the head (front) of the 